use crate::Class;
use crate::ParseError;

const SECTION_HEADER: [u8; 2] = [0x69, 0x66];
const SECTION_BYTES: usize = 32;

const SKILL_OFFSET_AMAZON: usize = 6;
const SKILL_OFFSET_SORCERESS: usize = 36;
const SKILL_OFFSET_NECROMANCER: usize = 66;
const SKILL_OFFSET_PALADIN: usize = 96;
const SKILL_OFFSET_BARBARIAN: usize = 126;
const SKILL_OFFSET_DRUID: usize = 221;
const SKILL_OFFSET_ASSASSIN: usize = 251;

const SKILLS_REFERENCE: [&'static str; 357] = [
    "Attack",
    "Kick",
    "Throw",
    "Unsummon",
    "Left Hand Throw",
    "Left Hand Swing",
    "Magic Arrow",
    "Fire Arrow",
    "Inner Sight",
    "Critical Strike",
    "Jab",
    "Cold Arrow",
    "Multiple Shot",
    "Dodge",
    "Power Strike",
    "Poison Javelin",
    "Exploding Arrow",
    "Slow Missiles",
    "Avoid",
    "Impale",
    "Lightning Bolt",
    "Ice Arrow",
    "Guided Arrow",
    "Penetrate",
    "Charged Strike",
    "Plague Javelin",
    "Strafe",
    "Immolation Arrow",
    "Dopplezon",
    "Evade",
    "Fend",
    "Freezing Arrow",
    "Valkyrie",
    "Pierce",
    "Lightning Strike",
    "Lightning Fury",
    "Fire Bolt",
    "Warmth",
    "Charged Bolt",
    "Ice Bolt",
    "Frozen Armor",
    "Inferno",
    "Static Field",
    "Telekinesis",
    "Frost Nova",
    "Ice Blast",
    "Blaze",
    "Fire Ball",
    "Nova",
    "Lightning",
    "Shiver Armor",
    "Fire Wall",
    "Enchant",
    "Chain Lightning",
    "Teleport",
    "Glacial Spike",
    "Meteor",
    "Thunder Storm",
    "Energy Shield",
    "Blizzard",
    "Chilling Armor",
    "Fire Mastery",
    "Hydra",
    "Lightning Mastery",
    "Frozen Orb",
    "Cold Mastery",
    "Amplify Damage",
    "Teeth",
    "Bone Armor",
    "Skeleton Mastery",
    "Raise Skeleton",
    "Dim Vision",
    "Weaken",
    "Poison Dagger",
    "Corpse Explosion",
    "Clay Golem",
    "Iron Maiden",
    "Terror",
    "Bone Wall",
    "Golem Mastery",
    "Raise Skeletal Mage",
    "Confuse",
    "Life Tap",
    "Poison Explosion",
    "Bone Spear",
    "BloodGolem",
    "Attract",
    "Decrepify",
    "Bone Prison",
    "Summon Resist",
    "IronGolem",
    "Lower Resist",
    "Poison Nova",
    "Bone Spirit",
    "FireGolem",
    "Revive",
    "Sacrifice",
    "Smite",
    "Might",
    "Prayer",
    "Resist Fire",
    "Holy Bolt",
    "Holy Fire",
    "Thorns",
    "Defiance",
    "Resist Cold",
    "Zeal",
    "Charge",
    "Blessed Aim",
    "Cleansing",
    "Resist Lightning",
    "Vengeance",
    "Blessed Hammer",
    "Concentration",
    "Holy Freeze",
    "Vigor",
    "Conversion",
    "Holy Shield",
    "Holy Shock",
    "Sanctuary",
    "Meditation",
    "Fist of the Heavens",
    "Fanaticism",
    "Conviction",
    "Redemption",
    "Salvation",
    "Bash",
    "Sword Mastery",
    "Axe Mastery",
    "Mace Mastery",
    "Howl",
    "Find Potion",
    "Leap",
    "Double Swing",
    "Pole Arm Mastery",
    "Throwing Mastery",
    "Spear Mastery",
    "Taunt",
    "Shout",
    "Stun",
    "Double Throw",
    "Increased Stamina",
    "Find Item",
    "Leap Attack",
    "Concentrate",
    "Iron Skin",
    "Battle Cry",
    "Frenzy",
    "Increased Speed",
    "Battle Orders",
    "Grim Ward",
    "Whirlwind",
    "Berserk",
    "Natural Resistance",
    "War Cry",
    "Battle Command",
    "Fire Hit",
    "UnHolyBolt",
    "SkeletonRaise",
    "MaggotEgg",
    "ShamanFire",
    "MagottUp",
    "MagottDown",
    "MagottLay",
    "AndrialSpray",
    "Jump",
    "Swarm Move",
    "Nest",
    "Quick Strike",
    "VampireFireball",
    "VampireFirewall",
    "VampireMeteor",
    "GargoyleTrap",
    "SpiderLay",
    "VampireHeal",
    "VampireRaise",
    "Submerge",
    "FetishAura",
    "FetishInferno",
    "ZakarumHeal",
    "Emerge",
    "Resurrect",
    "Bestow",
    "MissileSkill1",
    "MonTeleport",
    "PrimeLightning",
    "PrimeBolt",
    "PrimeBlaze",
    "PrimeFirewall",
    "PrimeSpike",
    "PrimeIceNova",
    "PrimePoisonball",
    "PrimePoisonNova",
    "DiabLight",
    "DiabCold",
    "DiabFire",
    "FingerMageSpider",
    "DiabWall",
    "DiabRun",
    "DiabPrison",
    "PoisonBallTrap",
    "AndyPoisonBolt",
    "HireableMissile",
    "DesertTurret",
    "ArcaneTower",
    "MonBlizzard",
    "Mosquito",
    "CursedBallTrapRight",
    "CursedBallTrapLeft",
    "MonFrozenArmor",
    "MonBoneArmor",
    "MonBoneSpirit",
    "MonCurseCast",
    "HellMeteor",
    "RegurgitatorEat",
    "MonFrenzy",
    "QueenDeath",
    "Scroll of Identify",
    "Book of Identify",
    "Scroll of Townportal",
    "Book of Townportal",
    "Raven",
    "Plague Poppy",
    "Wearwolf",
    "Shape Shifting",
    "Firestorm",
    "Oak Sage",
    "Summon Spirit Wolf",
    "Wearbear",
    "Molten Boulder",
    "Arctic Blast",
    "Cycle of Life",
    "Feral Rage",
    "Maul",
    "Eruption",
    "Cyclone Armor",
    "Heart of Wolverine",
    "Summon Fenris",
    "Rabies",
    "Fire Claws",
    "Twister",
    "Vines",
    "Hunger",
    "Shock Wave",
    "Volcano",
    "Tornado",
    "Spirit of Barbs",
    "Summon Grizzly",
    "Fury",
    "Armageddon",
    "Hurricane",
    "Fire Trauma",
    "Claw Mastery",
    "Psychic Hammer",
    "Tiger Strike",
    "Dragon Talon",
    "Shock Field",
    "Blade Sentinel",
    "Quickness",
    "Fists of Fire",
    "Dragon Claw",
    "Charged Bolt Sentry",
    "Wake of Fire Sentry",
    "Weapon Block",
    "Cloak of Shadows",
    "Cobra Strike",
    "Blade Fury",
    "Fade",
    "Shadow Warrior",
    "Claws of Thunder",
    "Dragon Tail",
    "Lightning Sentry",
    "Inferno Sentry",
    "Mind Blast",
    "Blades of Ice",
    "Dragon Flight",
    "Death Sentry",
    "Blade Shield",
    "Venom",
    "Shadow Master",
    "Royal Strike",
    "Wake Of Destruction Sentry",
    "Imp Inferno",
    "Imp Fireball",
    "Baal Taunt",
    "Baal Corpse Explode",
    "Baal Monster Spawn",
    "Catapult Charged Ball",
    "Catapult Spike Ball",
    "Suck Blood",
    "Cry Help",
    "Healing Vortex",
    "Teleport 2",
    "Self-resurrect",
    "Vine Attack",
    "Overseer Whip",
    "Barbs Aura",
    "Wolverine Aura",
    "Oak Sage Aura",
    "Imp Fire Missile",
    "Impregnate",
    "Siege Beast Stomp",
    "MinionSpawner",
    "CatapultBlizzard",
    "CatapultPlague",
    "CatapultMeteor",
    "BoltSentry",
    "CorpseCycler",
    "DeathMaul",
    "Defense Curse",
    "Blood Mana",
    "mon inferno sentry",
    "mon death sentry",
    "sentry lightning",
    "fenris rage",
    "Baal Tentacle",
    "Baal Nova",
    "Baal Inferno",
    "Baal Cold Missiles",
    "MegademonInferno",
    "EvilHutSpawner",
    "CountessFirewall",
    "ImpBolt",
    "Horror Arctic Blast",
    "death sentry ltng",
    "VineCycler",
    "BearSmite",
    "Resurrect2",
    "BloodLordFrenzy",
    "Baal Teleport",
    "Imp Teleport",
    "Baal Clone Teleport",
    "ZakarumLightning",
    "VampireMissile",
    "MephistoMissile",
    "DoomKnightMissile",
    "RogueMissile",
    "HydraMissile",
    "NecromageMissile",
    "MonBow",
    "MonFireArrow",
    "MonColdArrow",
    "MonExplodingArrow",
    "MonFreezingArrow",
    "MonPowerStrike",
    "SuccubusBolt",
    "MephFrostNova",
    "MonIceSpear",
    "ShamanIce",
    "Diablogeddon",
    "Delerium Change",
    "NihlathakCorpseExplosion",
    "SerpentCharge",
    "Trap Nova",
    "UnHolyBoltEx",
    "ShamanFireEx",
    "Imp Fire Missile Ex",
];

/// Represents a single skill. The id values match the ones found in Skills.txt in the game's files.
#[derive(Default, PartialEq, Eq, Debug, Ord, PartialOrd)]
pub struct Skill {
    id: u8,
    name: String,
    level: u8,
}

/// Holds entire skill tree of a character.
pub type SkillSet = [Skill; 30];

/// Converts the value from 0-30 to the one found in the game's file by adding an offset specific to each class.
fn get_offset(class: Class) -> usize {
    match class {
        Class::Amazon => SKILL_OFFSET_AMAZON,
        Class::Assassin => SKILL_OFFSET_ASSASSIN,
        Class::Barbarian => SKILL_OFFSET_BARBARIAN,
        Class::Druid => SKILL_OFFSET_DRUID,
        Class::Necromancer => SKILL_OFFSET_NECROMANCER,
        Class::Paladin => SKILL_OFFSET_PALADIN,
        Class::Sorceress => SKILL_OFFSET_SORCERESS,
    }
}

/// Parse a vector of bytes containg a character's skill tree (starting with header 0x69 0x66) and returns a SkillSet on success.
pub fn parse(byte_vector: &[u8;32], class: Class) -> Result<SkillSet, ParseError> {
    let mut skills: SkillSet = SkillSet::default();
    if byte_vector[0..2] != SECTION_HEADER {
        return Err(ParseError{message: format!("Found wrong header for skills section: expected {0:?}, found {1:?}", SECTION_HEADER, &byte_vector[0..2])})
    }
    let offset = get_offset(class);
    for i in 0..30 {
        skills[i] = Skill {
            id: (i + offset) as u8,
            name: String::from(SKILLS_REFERENCE[i + offset]),
            level: byte_vector[i + 2],
        };
    }
    Ok(skills)
}

/// Generates a byte vector from a given SkillSet
pub fn generate(skills: &SkillSet) -> Vec<u8> {
    let mut byte_vector: Vec<u8> = SECTION_HEADER.to_vec();
    for i in 0..30 {
        byte_vector.push(skills[i].level);
    }
    byte_vector
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_parse_and_generate() {
        let byte_vector = [
            0x69, 0x66, 0x00, 0x01, 0x00, 0x14, 0x01, 0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x14,
        ];

        let skills = parse(&byte_vector, Class::Sorceress).unwrap();
        for i in 0..30 {
            if skills[i].name == "Teleport" {
                assert!(skills[i].id == 54 && skills[i].level == 1);
            }
        }

        let result = generate(&skills);

        assert_eq!(result, byte_vector);
    }

    #[test]
    fn test_parse() {
        let byte_vector = [
            0x69, 0x66, 0x00, 0x01, 0x00, 0x14, 0x01, 0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x14,
        ];

        let skills = parse(&byte_vector, Class::Sorceress).unwrap();
        // println!("{0:?}", skills);
        for skill in skills {
            if skill.name == "Ice Blast" {
                assert!(skill.id == 45 && skill.level == 17);
            }
        }
    }
}
