#[cfg(test)]
mod tests {
    use crate::character::*;

    #[test]
    fn test_parse() {
        let bytes: [u8; 319] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x0F, 0x00, 0x00, 0x01, 0x10, 0x1E, 0x5C,
            0x00, 0x00, 0x00, 0x00, 0xBB, 0x29, 0xBD, 0x64, 0xFF, 0xFF, 0xFF, 0xFF, 0x28, 0x00,
            0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00,
            0x2B, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x9B, 0x00,
            0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x00,
            0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
            0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x39, 0x03, 0x02, 0x02, 0x02, 0x35,
            0xFF, 0x51, 0x02, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x4D, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
            0x80, 0x43, 0x2D, 0x95, 0x53, 0x00, 0x00, 0x00, 0x00, 0x19, 0x50, 0x40, 0x5C, 0x07,
            0x00, 0x23, 0x00, 0xD6, 0x9B, 0x19, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x62, 0x61, 0x20, 0xFF, 0x07, 0x1C,
            0x01, 0x04, 0x00, 0x00, 0x00, 0x75, 0x69, 0x74, 0x20, 0xFF, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x78, 0x70, 0x6C, 0x20, 0xFF, 0x07, 0xD9, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x75, 0x61, 0x70, 0x20, 0x4D, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E,
            0x79, 0x61, 0x68, 0x61, 0x6C, 0x6C, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        let expected_result = Character {
            weapon_set: WeaponSet::Main,
            status: Status { expansion: true, hardcore: false, ladder: false, died: true },
            progression: Progression(15),
            title: String::from("Matriarch"),
            class: Class::Sorceress,
            level: 92,
            last_played: 1690118587,
            assigned_skills: [
                40, 59, 54, 42, 43, 65535, 65535, 155, 149, 52, 220, 65535, 65535, 65535, 65535,
                65535,
            ],
            left_mouse_skill: 55,
            right_mouse_skill: 54,
            left_mouse_switch_skill: 0,
            right_mouse_switch_skill: 54,
            menu_appearance: [
                57, 3, 2, 2, 2, 53, 255, 81, 2, 2, 255, 255, 255, 255, 255, 255, 77, 255, 255, 255,
                255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            ],
            difficulty: Difficulty::Hell,
            act: Act::Act1,
            map_seed: 1402285379,
            mercenary: Mercenary {
                dead: false,
                id: 1547718681,
                name_id: 7,
                name: String::from("Emilio"),
                variant: mercenary::Variant(
                    mercenary::Class::DesertMercenary(mercenary::DesertMercenary::Might),
                    Difficulty::Hell,
                ),
                experience: 102341590,
            },
            resurrected_menu_appearance: [
                111, 98, 97, 32, 255, 7, 28, 1, 4, 0, 0, 0, 117, 105, 116, 32, 255, 2, 0, 0, 0, 0,
                0, 0, 120, 112, 108, 32, 255, 7, 217, 0, 0, 0, 0, 0, 117, 97, 112, 32, 77, 7, 248,
                0, 0, 0, 0, 0,
            ],
            name: Name(String::from("Nyahallo")),
        };
        let parsed_result = match parse(&bytes) {
            Ok(result) => result,
            Err(e) => {
                println!("{e:?}");
                assert_eq!(false, true);
                return;
            }
        };
        //println!("{0:?}", parsed_result);
        assert_eq!(parsed_result, expected_result);
    }

    #[test]
    fn test_generate() {
        let expected_result: [u8; 319] = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x0F, 0x00, 0x00, 0x01, 0x10, 0x1E, 0x5C,
            0x00, 0x00, 0x00, 0x00, 0xBB, 0x29, 0xBD, 0x64, 0xFF, 0xFF, 0xFF, 0xFF, 0x28, 0x00,
            0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00,
            0x2B, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x9B, 0x00,
            0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x00,
            0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
            0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x39, 0x03, 0x02, 0x02, 0x02, 0x35,
            0xFF, 0x51, 0x02, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x4D, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
            0x80, 0x43, 0x2D, 0x95, 0x53, 0x00, 0x00, 0x00, 0x00, 0x19, 0x50, 0x40, 0x5C, 0x07,
            0x00, 0x23, 0x00, 0xD6, 0x9B, 0x19, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x62, 0x61, 0x20, 0xFF, 0x07, 0x1C,
            0x01, 0x04, 0x00, 0x00, 0x00, 0x75, 0x69, 0x74, 0x20, 0xFF, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x78, 0x70, 0x6C, 0x20, 0xFF, 0x07, 0xD9, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x75, 0x61, 0x70, 0x20, 0x4D, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E,
            0x79, 0x61, 0x68, 0x61, 0x6C, 0x6C, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        let character = Character {
            weapon_set: WeaponSet::Main,
            status: Status { expansion: true, hardcore: false, ladder: false, died: true },
            progression: Progression(15),
            title: String::from("Matriarch"),
            class: Class::Sorceress,
            level: 92,
            last_played: 1690118587,
            assigned_skills: [
                40, 59, 54, 42, 43, 65535, 65535, 155, 149, 52, 220, 65535, 65535, 65535, 65535,
                65535,
            ],
            left_mouse_skill: 55,
            right_mouse_skill: 54,
            left_mouse_switch_skill: 0,
            right_mouse_switch_skill: 54,
            menu_appearance: [
                57, 3, 2, 2, 2, 53, 255, 81, 2, 2, 255, 255, 255, 255, 255, 255, 77, 255, 255, 255,
                255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            ],
            difficulty: Difficulty::Hell,
            act: Act::Act1,
            map_seed: 1402285379,
            mercenary: Mercenary {
                dead: false,
                id: 1547718681,
                name_id: 7,
                name: String::from("Emilio"),
                variant: mercenary::Variant(
                    mercenary::Class::DesertMercenary(mercenary::DesertMercenary::Might),
                    Difficulty::Hell,
                ),
                experience: 102341590,
            },
            resurrected_menu_appearance: [
                111, 98, 97, 32, 255, 7, 28, 1, 4, 0, 0, 0, 117, 105, 116, 32, 255, 2, 0, 0, 0, 0,
                0, 0, 120, 112, 108, 32, 255, 7, 217, 0, 0, 0, 0, 0, 117, 97, 112, 32, 77, 7, 248,
                0, 0, 0, 0, 0,
            ],
            name: Name(String::from("Nyahallo")),
        };
        let generated_result = generate(&character);

        assert_eq!(expected_result, generated_result);
    }

    #[test]
    fn test_names() {
        assert!(Name::from(&String::from("A")).is_err());
        assert!(Name::from(&String::from("Joe_-_")).is_err());
        assert!(Name::from(&String::from("-joe")).is_err());
        assert!(Name::from(&String::from("123joe")).is_err());
        assert!(Name::from(&String::from("BlueRedGreyGreenViolet")).is_err());
        assert_eq!(Name::from(&String::from("Test")).unwrap(), Name(String::from("Test")));
        assert_eq!(Name::from(&String::from("榮華富貴")).unwrap(), Name(String::from("榮華富貴")));
    }
}
