#[cfg(test)]
mod tests {
    use crate::waypoints::*;

    #[test]
    fn parse_waypoints_test() {
        let bytes: [u8; 81] = [
            0x57, 0x53, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x02, 0x01, 0xEF, 0xEB, 0xD7, 0xFF,
            0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0xEF, 0xE3, 0xBD, 0xFF, 0x51, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x01, 0xEF, 0xEF, 0xEF, 0xFE, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ];
        let parsed_waypoints = match parse(&bytes) {
            Ok(res) => res,
            Err(e) => panic!("parse_waypoints_test: {0}", e),
        };
        //println!("{0}", parsed_waypoints);
        assert_eq!(
            parsed_waypoints.hell.act1[8],
            WaypointInfo {
                id: Waypoint::Catacombs,
                name: "Catacombs",
                act: Act::Act1,
                acquired: true
            }
        );
        assert_eq!(
            parsed_waypoints.nightmare.act2[3],
            WaypointInfo {
                id: Waypoint::HallsOfTheDead,
                name: "Halls of the Dead",
                act: Act::Act2,
                acquired: false
            }
        );
    }

    #[test]
    fn generate_waypoints_test() {
        let expected_bytes: [u8; 81] = [
            0x57, 0x53, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ];

        assert_eq!(expected_bytes, generate(&Waypoints::default()));
    }
}
